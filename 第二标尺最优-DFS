int optvalue;   //第二标尺最优值
vector<int> pre[MAXV];  //存放结点的前驱结点
vector<int> path,tempPath;  //最优路径，临时最优路径
void DFS(int v){
  //v为当前访问结点
  //递归边界
  if(v==st){
    //若到达了叶子结点st(即路径的起点)
    tempPath.push_back(v);  //将起点st加入临时路径tempPath的后面
    int value;  //存放临时路径tempPath的第二标尺的值
    //计算路径tempPath上的value值
    if(value优于optvalue){
      optvalue = value;  //更新第二标尺最优值
      path = tempPath;  //和最优路径
    }
    tempPath.pop_back();  //将刚加入的结点删除
    return;
  }
  //递归式
  tempPath.push_back(v);  //将当前访问结点加入临时路径tempPath的最后面
  for(int i=0;i<pre[v].size();i++){
    DFS(pre[v][i]);  //结点v的前驱结点pre[v][i],递归
  }
  tempPath.pop_back();   //遍历完所有前驱结点,将当前结点v删除
  }
